// src/containers/CourseContainer.jsx
import React, { useEffect, useState } from "react";
import CourseListPages from "../../pages/course/CourseListPages";
import axiosClient from "../../api/axiosClient";

const CourseContainer = () => {
  const [courses, setCourses] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    const fetchCourses = async () => {
      console.log("üöÄ [useEffect] ƒê√£ ch·∫°y fetchCourses()");
      setLoading(true);
      setError("");

      const token = localStorage.getItem("accessToken");
      console.log(
        "üåç API URL:",
        axiosClient.defaults.baseURL + "/courses/lists"
      );

      try {
        const res = await axiosClient.get("/courses/lists", {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        });

        console.log("‚úÖ API tr·∫£ v·ªÅ d·ªØ li·ªáu:", res.data);

        if (Array.isArray(res.data)) {
          setCourses(res.data);
        } else if (res.data?.content && Array.isArray(res.data.content)) {
          console.warn("‚ö†Ô∏è API tr·∫£ v·ªÅ ki·ªÉu { content: [...] }");
          setCourses(res.data.content);
        } else {
          console.error("‚ùå D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá:", res.data);
          setCourses([]);
          setError("L·ªói: D·ªØ li·ªáu tr·∫£ v·ªÅ kh√¥ng h·ª£p l·ªá.");
        }
      } catch (err) {
        console.error("‚ùå L·ªói khi g·ªçi API:", err);
        setError("L·ªói khi t·∫£i danh s√°ch kh√≥a h·ªçc.");
        setCourses([]);
      } finally {
        setLoading(false);
      }
    };

    fetchCourses();
  }, []);

  const handleDeleteCourse = async (courseId) => {
    // ---- M√£ g·ª° l·ªói ----
    console.log("ID kh√≥a h·ªçc nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ x√≥a:", courseId);
    if (typeof courseId === "undefined" || courseId === null) {
      alert(
        "L·ªói: Kh√¥ng th·ªÉ x√≥a v√¨ ID kh√≥a h·ªçc kh√¥ng x√°c ƒë·ªãnh. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API."
      );
      return;
    }
    // ---- K·∫øt th√∫c g·ª° l·ªói ----

    if (!window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√≥a h·ªçc n√†y kh√¥ng?")) {
      return;
    }

    try {
      // G·ªçi API ƒë·ªÉ x√≥a kh√≥a h·ªçc v·ªõi ID t∆∞∆°ng ·ª©ng
      await axiosClient.delete(`/courses/delete/${courseId}`);
      // C·∫≠p nh·∫≠t l·∫°i state ƒë·ªÉ lo·∫°i b·ªè kh√≥a h·ªçc ƒë√£ x√≥a kh·ªèi giao di·ªán
      setCourses((prev) => prev.filter((course) => course.id !== courseId));
      alert("X√≥a kh√≥a h·ªçc th√†nh c√¥ng!");
    } catch (error) {
      console.error("L·ªói khi x√≥a kh√≥a h·ªçc:", error);
      alert(
        "X√≥a kh√≥a h·ªçc th·∫•t b·∫°i: " +
          (error.response?.data?.message || error.message)
      );
    }
  };

  return (
    <>
      {error && (
        <>
          <div style={{ color: "red", marginBottom: "1rem" }}>{error}</div>
          {console.log("ü™µ L·ªói ƒëang hi·ªÉn th·ªã:", error)}
        </>
      )}
      <CourseListPages
        courses={courses}
        loading={loading}
        onDeleteCourse={handleDeleteCourse}
      />
    </>
  );
};

export default CourseContainer;
